/* eslint-disable sort-imports */
import * as core from '@actions/core'
import axios, {AxiosRequestConfig} from 'axios'
import {
  GetRunResponse,
  Run,
  RunResponseInterface
} from './interfaces/runInterface'

function getRunName(): string {
  const date = new Date()
  return `Auto testing ${date.getDay()}-${date.getMonth()}-${date.getFullYear()}`
}

function getTestRailConfg(path: string): AxiosRequestConfig {
  const host = core.getInput('testrail_host')
  const username = core.getInput('testrail_username')
  const password = core.getInput('testrail_password')
  const config: AxiosRequestConfig = {
    method: 'GET',
    headers: {'Content-Type': 'application/json'},
    url: `${host}/${path}`,
    auth: {
      username,
      password
    }
  }
  core.notice(JSON.stringify(config))
  return config
}

export async function getOrCreateRunID(): Promise<Run | undefined> {
  const projectId = core.getInput('testrail_projectid')
  const response = await getRuns(projectId)
  const runName = getRunName()
  let match = (response.runs || []).find(
    runInfo => runInfo.name.toLowerCase() === runName
  )
  if (!match) {
    const suiteId = core.getInput('testrail_suidId')
    const runResponse = await addRun(projectId, {
      name: runName,
      description: `This run was autogenerated by the GH Action for automatic regretion.`,
      suite_id: suiteId
    })
    match = {
      name: runResponse.name,
      id: runResponse.id
    }
  }

  return match
}

async function getRuns(projectId: string): Promise<RunResponseInterface> {
  const config = getTestRailConfg(`get_runs/${projectId}`)
  const response = await axios.request<RunResponseInterface>(config)
  return response.data
}

async function addRun(
  projectId: string,
  runInfo: {name: string; description: string; suite_id: string}
): Promise<GetRunResponse> {
  const config = getTestRailConfg(`add_run/${projectId}`)
  config.data = runInfo
  const runResponse = await axios.request<GetRunResponse>(config)
  return runResponse.data
}
