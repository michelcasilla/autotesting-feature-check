/* eslint-disable sort-imports */
import * as core from '@actions/core'
import axios, {AxiosRequestConfig} from 'axios'
import {
  GetRunResponse,
  Run,
  RunResponseInterface
} from './interfaces/runInterface'
const defaultCaseId = 936

function getRunName(): string {
  const date = new Date()
  return `Automated Test Run ${date.getDay()}/${date.getMonth()}/${date.getFullYear()}`
}

function getTestRailConfg(path: string, method?: string): AxiosRequestConfig {
  const host = core.getInput('testrail_host')
  const username = core.getInput('testrail_username')
  const password = core.getInput('testrail_password')
  const config: AxiosRequestConfig = {
    method: method || 'GET',
    headers: {
      'Content-Type': 'application/json'
    },
    url: `${host}/${path}`,
    withCredentials: true,
    auth: {
      username,
      password
    }
  }
  return config
}

function checkIfRunNameExist(runs: Run[], name: string): Run | undefined {
  return (runs || []).find(
    runInfo => runInfo.name.toLowerCase() === name.toLowerCase()
  )
}

function updateRunName(run: Run): Run {
  const splitted = run.name.split(' - ')
  let nIndex = 1
  if (splitted.length > 1) {
    // get the last index value to increase one
    nIndex = Number(splitted[1]) + 1
    // update the name to the first part
    run.name = splitted[0]
  }
  run.name = `${run.name} - ${nIndex}`
  return run
}

export async function getOrCreateRunID(): Promise<Run | undefined> {
  try {
    const projectId = core.getInput('testrail_projectid')
    const response = await getRuns(projectId)
    core.notice('GET THE LIST OF RUNs')
    core.debug(JSON.stringify(response))
    const runName = getRunName()
    core.notice('Create the run name')
    core.notice(`Run name ${runName}`)
    let match = checkIfRunNameExist(response.runs, runName)
    core.notice('Creck if exist')
    core.notice(JSON.stringify(match))

    if (match && match?.is_completed === true) {
      match = updateRunName(match)
      core.notice(`Update run name: ${match.name}`)
    }

    if (!match || match?.is_completed === true) {
      core.notice('Not match found')
      const suiteId = core.getInput('testrail_suidId')
      core.notice(`Print suite id ${suiteId}`)
      const runResponse = await addRun(projectId, {
        name: runName,
        description: `This run was autogenerated by the GH Action for automatic regretion.`,
        suite_id: suiteId,
        case_ids: [defaultCaseId],
        include_all: false
      })
      core.notice('Create the runId and update the match')
      core.notice(JSON.stringify(runResponse))
      match = {
        name: runResponse.name,
        id: runResponse.id
      }
    }
    return match
  } catch (error) {
    core.setFailed(error as string)
  }
}

async function getRuns(projectId: string): Promise<RunResponseInterface> {
  const config = getTestRailConfg(`get_runs/${projectId}`)
  const response = await axios.request<RunResponseInterface>(config)
  return response.data
}

async function addRun(
  projectId: string,
  runInfo: {
    name: string
    description: string
    suite_id: string
    case_ids?: number[]
    include_all: boolean
  }
): Promise<GetRunResponse> {
  const config = getTestRailConfg(`add_run/${projectId}`, 'POST')
  config.data = runInfo
  const runResponse = await axios.request<GetRunResponse>(config)
  return runResponse.data
}
